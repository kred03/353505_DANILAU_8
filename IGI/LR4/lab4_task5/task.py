import numpy as np

# 1. Создание случайной целочисленной матрицы A[n,m]
n, m = 5, 4  # например, матрица 5x4
A = np.random.randint(1, 100, size=(n, m))
print("Исходная матрица A:\n", A)

# а) Основные операции NumPy
# 1. Создание массива
arr1 = np.array([1, 2, 3])  # из списка
arr2 = np.array([[1, 2], [3, 4]])

# 2. Создание массивов специального вида
zeros_arr = np.zeros((2, 3))  # Матрица нулей
ones_arr = np.ones((3, 2))    # Матрица единиц
eye_arr = np.eye(3)           # Единичная матрица

# 3. Индексирование и срезы
print("\nПервый элемент:", A[0, 0])
print("Первая строка:", A[0, :])
print("Последний столбец:", A[:, -1])

# 4. Поэлементные операции
B = A * 2  # Умножение всех элементов на 2
C = A + B  # Сложение матриц

# б) Математические и статистические операции
# Сортировка по последнему столбцу
sorted_A = A[A[:, -1].argsort()[::-1]]
print("\nМатрица, отсортированная по последнему столбцу:\n", sorted_A)

# Вычисление среднего последнего столбца двумя способами
last_col = A[:, -1]
mean_numpy = np.mean(last_col)  # Способ 1: через функцию NumPy
mean_manual = sum(last_col) / len(last_col)  # Способ 2: вручную

print(f"\nСреднее последнего столбца (numpy): {mean_numpy:.2f}")
print(f"Среднее последнего столбца (вручную): {mean_manual:.2f}")

# Другие статистические операции
print("\nМедиана:", np.median(A))
print("Корреляционная матрица:\n", np.corrcoef(A))
print("Дисперсия по столбцам:", np.var(A, axis=0))
print("Стандартное отклонение по строкам:", np.std(A, axis=1))